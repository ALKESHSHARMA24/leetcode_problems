
//c++ code

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    //OPTIMAL APPRAOCH USING MERGE SORT WITH O(1) SC 
    ListNode* sortList(ListNode* head) {
      if(head==NULL || head->next==NULL){
        return head;
      }

      ListNode* slow=head;
      ListNode* fast=head->next; //we do this because we want first miidle node not second one

      while(fast!=NULL && fast -> next !=NULL){
        slow=slow->next;
        fast=fast->next->next;
      }
      ListNode* MiddleNode=slow;//find first middle
      ListNode* lefthead=head; 
      ListNode* righthead=MiddleNode->next;
      MiddleNode->next=NULL;

      //ReAssign both head beacuse after the both part sorting done then may be there can be newhead replace for those part
      lefthead=sortList(lefthead); 
      righthead=sortList(righthead);
      
      return mergeList(lefthead,righthead); //merge the sorted parts again to linkedlist
    }
    ListNode* mergeList(ListNode* lefthead,ListNode* righthead){
        ListNode* dummyNode=new ListNode(-1);
        ListNode* traverse=dummyNode;
        ListNode* ls1=lefthead;
        ListNode* ls2=righthead;

        while(ls1!=NULL && ls2!=NULL){
            
            if(ls1->val <= ls2->val){
                traverse->next=ls1;
                traverse=traverse->next;
                ls1=ls1->next;
            }else{
                traverse->next=ls2;
                traverse=traverse->next;
                ls2=ls2->next;
            }
            
        }

        if(ls1){
            traverse->next=ls1;
        }else{
            traverse->next=ls2;
        }
        return dummyNode->next;
    }
};

---------------------------------------------------------------------java code--------------------------------------------------

/**
 * Definition for singly-linked list.
 * class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    // OPTIMAL APPROACH USING MERGE SORT WITH O(1) SPACE COMPLEXITY 
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) {
            return head;
        }

        ListNode slow = head;
        ListNode fast = head.next; // we do this because we want first middle node not the second one

        while(fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        ListNode middleNode = slow; // find first middle
        ListNode leftHead = head; 
        ListNode rightHead = middleNode.next;
        middleNode.next = null;

        // Reassign both head because after sorting both parts, there can be new head replaced for those parts
        leftHead = sortList(leftHead); 
        rightHead = sortList(rightHead);
        
        return mergeList(leftHead, rightHead); // merge the sorted parts again to linked list
    }
    
    public ListNode mergeList(ListNode leftHead, ListNode rightHead) {
        ListNode dummyNode = new ListNode(-1);
        ListNode traverse = dummyNode;
        ListNode ls1 = leftHead;
        ListNode ls2 = rightHead;

        while(ls1 != null && ls2 != null) {
            if(ls1.val <= ls2.val) {
                traverse.next = ls1;
                traverse = traverse.next;
                ls1 = ls1.next;
            } else {
                traverse.next = ls2;
                traverse = traverse.next;
                ls2 = ls2.next;
            }
        }

        if(ls1 != null) {
            traverse.next = ls1;
        } else {
            traverse.next = ls2;
        }
        return dummyNode.next;
    }
}
